<section class="flexslider">
  <ul class="flexslides">

    <?php $query = new WP_Query("post_type=sliders&posts_per_page=-1&orderby=ASC"); while ($query->have_posts()) : $query->the_post(); ?>
    <li>
      <?php if( get_post_meta($post->ID, 'ace_slider_url', true) ) { ?><a href="<?php echo get_post_meta($post->ID, 'ace_slider_url', true); ?>"><?php } ?>
        <?php if ( has_post_thumbnail() ) { $slide_img = wp_get_attachment_image_src( get_post_thumbnail_id($post->ID), 'slide_image', false, '' ); ?>
          <?php the_post_thumbnail( 'slide_image' ); ?>
        <?php } ?>
      <?php if( get_post_meta($post->ID, 'ace_slider_url', true) ) { ?></a><?php } ?>
      <?php if(get_option("ace_feature_title_enable")) { ?>
        <article class="flex-caption">
        <h3><?php if( get_post_meta($post->ID, 'ace_slider_url', true) ) { ?><a href="<?php echo get_post_meta($post->ID, 'ace_slider_url', true); ?>"><?php } ?><?php the_title(); ?><?php if( get_post_meta($post->ID, 'ace_slider_url', true) ) { ?></a><?php } ?></h3>
        </article>
      <?php } ?>
    </li>
    <?php endwhile; wp_reset_query(); ?>

  </ul>
</section><!-- .flexslider -->
	  


<script type="text/javascript">
/* <![CDATA[ */
jQuery(document).ready(function($){ // START
  $('.flexslider').flexslider({

    namespace: "flex-",       //{NEW} String: Prefix string attached to the class of every element generated by the plugin
    selector: ".flexslides > li", //{NEW} Selector: Must match a simple pattern. '{container} > {slide}' -- Ignore pattern at your own peril
    animation: "fade",        //String: Select your animation type, "fade" or "slide"
    easing: "swing",          //{NEW} String: Determines the easing method used in jQuery transitions. jQuery easing plugin is supported!
    direction: "horizontal",  //String: Select the sliding direction, "horizontal" or "vertical"
    reverse: false,           //{NEW} Boolean: Reverse the animation direction
    animationLoop: true,      //Boolean: Should the animation loop? If false, directionNav will received "disable" classes at either end
    smoothHeight: true,      //{NEW} Boolean: Allow height of the slider to animate smoothly in horizontal mode? 
    startAt: 0,               //Integer: The slide that the slider should start on. Array notation (0 = first slide)
    slideshow: <?php if( get_option("ace_featured_slide_sliding" ) == true ) { echo "true"; } else { echo "false"; } ?>,          //Boolean: Animate slider automatically
    slideshowSpeed: <?php if( get_option("ace_featured_slide_pause" ) == true ) { echo get_option("ace_featured_slide_pause"); } else { echo "1000"; } ?>,     //Integer: Set the speed of the slideshow cycling, in milliseconds
    animationSpeed: <?php if( get_option("ace_featured_slide_speed" ) == true ) { echo get_option("ace_featured_slide_speed"); } else { echo "500"; } ?>,      //Integer: Set the speed of animations, in milliseconds
    initDelay: 0,             //{NEW} Integer: Set an initialization delay, in milliseconds
    randomize: false,         //Boolean: Randomize slide order

    // Usability features
    pauseOnAction: true,  //Boolean: Pause the slideshow when interacting with control elements, highly recommended.
    pauseOnHover: false,  //Boolean: Pause the slideshow when hovering over slider, then resume when no longer hovering
    useCSS: true,         //{NEW} Boolean: Slider will use CSS3 transitions if available
    touch: true,          //{NEW} Boolean: Allow touch swipe navigation of the slider on touch-enabled devices
    video: false,         //{NEW} Boolean: If using video in the slider, will prevent CSS3 3D Transforms to avoid graphical glitches

    // Primary Controls
    controlNav: <?php if( get_option("ace_featured_slide_pager_nav" ) == true ) { echo "true"; } else { echo "false"; } ?>,     //Boolean: Create navigation for paging control of each clide? Note: Leave true for manualControls usage
    directionNav: <?php if( get_option("ace_featured_slide_nav" ) == true ) { echo "true"; } else { echo "false"; } ?>,   //Boolean: Create navigation for previous/next navigation? (true/false)
    prevText: "Previous", //String: Set the text for the "previous" directionNav item
    nextText: "Next",     //String: Set the text for the "next" directionNav item

    // Secondary Navigation
    keyboard: true,           //Boolean: Allow slider navigating via keyboard left/right keys
    multipleKeyboard: false,  //{NEW} Boolean: Allow keyboard navigation to affect multiple sliders. Default behavior cuts out keyboard navigation with more than one slider present.
    mousewheel: false,        //{UPDATED} Boolean: Requires jquery.mousewheel.js (https://github.com/brandonaaron/jquery-mousewheel) - Allows slider navigating via mousewheel
    pausePlay: false,         //Boolean: Create pause/play dynamic element
    pauseText: 'Pause',       //String: Set the text for the "pause" pausePlay item
    playText: 'Play',         //String: Set the text for the "play" pausePlay item

    // Special properties
    controlsContainer: "",  //{UPDATED} Selector: USE CLASS SELECTOR. Declare which container the navigation elements should be appended too. Default container is the FlexSlider element. Example use would be ".flexslider-container". Property is ignored if given element is not found.
    manualControls: "",     //Selector: Declare custom control navigation. Examples would be ".flex-control-nav li" or "#tabs-nav li img", etc. The number of elements in your controlNav should match the number of slides/tabs.
    sync: "",               //{NEW} Selector: Mirror the actions performed on this slider with another slider. Use with care.
    asNavFor: "",           //{NEW} Selector: Internal property exposed for turning the slider into a thumbnail navigation for another slider

    // Carousel Options
    itemWidth: 0,   //{NEW} Integer: Box-model width of individual carousel items, including horizontal borders and padding.
    itemMargin: 0,  //{NEW} Integer: Margin between carousel items.
    minItems: 0,    //{NEW} Integer: Minimum number of carousel items that should be visible. Items will resize fluidly when below this.
    maxItems: 0,    //{NEW} Integer: Maxmimum number of carousel items that should be visible. Items will resize fluidly when above this limit.
    move: 0,        //{NEW} Integer: Number of carousel items that should move on animation. If 0, slider will move all visible items.

    // Callback API
    start: function(){},            //Callback: function(slider) - Fires when the slider loads the first slide
    before: function(){},           //Callback: function(slider) - Fires asynchronously with each slider animation
    after: function(){},            //Callback: function(slider) - Fires after each slider animation completes
    end: function(){},              //Callback: function(slider) - Fires when the slider reaches the last slide (asynchronous)
    added: function(){},            //{NEW} Callback: function(slider) - Fires after a slide is added
    removed: function(){}           //{NEW} Callback: function(slider) - Fires after a slide is removed

  });

  jQuery(document).ready(function($){
    fixFlexsliderHeight();
  });

  jQuery(window).load(function($) {
    fixFlexsliderHeight();
  });

  jQuery(window).resize(function($) {
    fixFlexsliderHeight();
  });

  function fixFlexsliderHeight() {
    // Set fixed height based on the tallest slide
    jQuery('.flexslider').each(function($){
      var sliderHeight = 0;
      jQuery(this).find('.flexslides > li').each(function($){
        slideHeight = jQuery(this).height();
        if (sliderHeight < slideHeight) {
          sliderHeight = slideHeight;
        }
      });
      jQuery(this).find('ul.flexslides').css({'height' : sliderHeight});
    });
  }

}); // END
/* ]]> */
</script>